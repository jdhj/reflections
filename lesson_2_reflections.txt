What happens when you initialize a repository? Why do you need to do it?

When we initialize a repository, we use the command git init.
This command creates the hidden .git directory and populates it with files ready to store the meta-data git will use to track the repository.
We need to do this to enable git to process and track the directory as a git repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area seems to be a somewhat abstract concept, the purpose of which is to prepare a potentially complicated commit before its execution.
The alternative might be a risky and error prone multi-line statement applying all the commit at once.
The staging area allows us to prepare the commit with more care, reviewing it carefully with the status command before final execution.

How can you use the staging area to make sure you have one commit per logical
change?

I presume that the answer to this is that using the staging area to select only certain changed files for the commit allows us to block up the changes into single logical changes for each commit.
There would seem however to be some obvious limitations to this.
Firstly, this is only going to work if the logical changes are restricted to unique sets of files with no overlap.
If not, it is not going to be possible to separate them using this method.
In addition, it strikes me as slightly risky to commit only some changes as it will not be possible to directly test the directory state that will be committed.
This could lead to a commit in a state that has never been tested and may be broken in some way. Perhaps there is a distinction that should be made here between early development commits, which are of course going to be broken in all kinds of major ways, and maintenance commits with which some effort should be made to ensure that each is as functional as it can be.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A new version of an already implemented program adding complicated new features that may require lengthy development and testing might be best done in a branch.
This would allow parallel maintenance to be done on the master branch independently of the work on the new version.
Another good use for branches might be when several people are working on different parts of a system at the same time.
With branches used in this way, changes can be made independently to be integrated together later without different programmers causing problems for each other with their changes.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
